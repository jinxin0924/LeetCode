__author__ = 'JxKing'
# Write a function to find the longest common prefix string amongst an array of strings.

class Solution(object): # worst case,O(n2)
    @profile
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        l=len(s)
        if l<=1:return s
        if l==2:
            if s[0]==s[-1]:return s
            else:return s[0]
        best=''
        left=''
        for i in range(1,l-1):
            left+=s[i-1]
            j=i
            while s[j+1]==s[j] and j<l-2:
                j+=1
            mid=s[i:j+1]
            right=s[j+1:]
            current=self.checkPalindrome(left,right,mid)
            if len(current)>len(best):
                best=current
        return best

    @profile
    def checkPalindrome(self,left,right,i):
        cnt=0

        while left[-(cnt+1)]==right[cnt]:
            cnt+=1
            if cnt==min(len(left),len(right)):
                break
        if cnt==0:
            return i
        return left[-(cnt):]+i+right[:cnt]
solution=Solution()
for i in range(11):
    solution.longestPalindrome
